public class Solution {
    
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (candidates == null||candidates.length==0) return result;
        
        Arrays.sort(candidates);
        dfs(candidates,target,new ArrayList<Integer>(), result, 0);
        return result;
    }
    
    public void dfs(int[] candidates, int target, List<Integer> path, List<List<Integer>> result, int index){
        
        if (target<0) return ;
        
        if (target == 0) {
            result.add(new ArrayList(path));
            return;
        }
        
        int temp = -1;
        for (int i = index; i<candidates.length; i++){
            int num = candidates[i];
            if (temp==num) continue;
            temp = num;
            path.add(num);
            dfs(candidates,target-num,path,result,i+1);
            path.remove(path.size()-1);
            
        }
        
    }

}
