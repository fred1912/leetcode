public class Solution {
    private int target;
    private String s;
    public List<String> addOperators(String num, int target) {
        List<String> result = new ArrayList<String>();
        int len = num.length();
        if (len==0) return result;
        
        this.target = target;
        this.s = num;
        
        dfs(result,"",0,0,0);
        return result;
    }
    public void dfs(List<String> result,String path,int pos, long cur, long pre){
        if (pos==s.length()){
            if (cur==target) {
                result.add(path);
            }
            return ;
        }
        
        for (int i=pos;i<s.length();i++){
            if (i!=pos&&s.charAt(pos)=='0') {
                break;
            }
            Long temp = Long.parseLong(s.substring(pos,i+1));
            if (pos==0){
                dfs(result,path+temp,i+1,temp,temp);
            }else{
                dfs(result,path+"+"+temp,i+1,cur+temp,temp);
                dfs(result,path+"-"+temp,i+1,cur-temp,-temp);
                dfs(result,path+"*"+temp,i+1,cur-pre+pre*temp,pre*temp);
            }
            
        }
    }
}
