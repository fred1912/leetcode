public class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<List<Integer>> map = new ArrayList<List<Integer>>();
        List<Integer> result = new ArrayList<Integer>();
        
        if (n==1){
            result.add(0);
            return result;
        }
        
        int[] degree = new int[n];
        for (int i=0;i<n;i++){
            map.add(new ArrayList<Integer>());
        }
        for (int i=0;i<edges.length;i++){
            map.get(edges[i][0]).add(edges[i][1]);
            map.get(edges[i][1]).add(edges[i][0]);
            degree[edges[i][0]]++;
            degree[edges[i][1]]++;
        }
        Queue<Integer> q = new ArrayDeque<Integer>();
        
        for (int i=0;i<n;i++){
            if (degree[i]==0) return result;
            if (degree[i]==1) q.offer(i);
        }
        
        while (!q.isEmpty()){
            result = new ArrayList<Integer>();
            int size = q.size();
            for (int i=0;i<size;i++){
                int temp = q.poll();
                result.add(temp);
                degree[temp]--;
                for (int k=0;k<map.get(temp).size();k++){
                    int next = map.get(temp).get(k);
                    degree[next]--;
                    if (degree[next]==0) continue;
                    if (degree[next]==1){
                        q.offer(next);
                    }
                }
            }
        }
        return result;
       
    }
}
