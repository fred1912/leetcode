/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class SummaryRanges {

    TreeMap<Integer, Interval> map;
    
    /** Initialize your data structure here. */
    public SummaryRanges() {
        map = new TreeMap<>();
    }
    
    public void addNum(int val) {
        //val<k
        Integer ceil = map.higherKey(val);
        //k<=val
        Integer floor = map.floorKey(val);
        if (floor!=null&&map.get(floor).end+1>=val){
            if (ceil!=null&&ceil==val+1){
                map.get(floor).end = map.get(ceil).end;
                map.remove(ceil);
            }else{
                map.get(floor).end = Math.max(val,map.get(floor).end);
            }
        }else if (ceil!=null&&ceil==val+1){
            map.put(val,new Interval(val,map.get(ceil).end));
            map.remove(ceil);
        }else {
            map.put(val,new Interval(val,val));
        }
    }
    
    public List<Interval> getIntervals() {
        return new ArrayList<>(map.values());    
    }
}

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges obj = new SummaryRanges();
 * obj.addNum(val);
 * List<Interval> param_2 = obj.getIntervals();
 */
