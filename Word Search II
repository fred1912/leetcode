
public class Solution {
    
    Set<String> result = new HashSet<String>();
    public List<String> findWords(char[][] board, String[] words) {
        //result = new ArrayList<String>();
        Trie trie = new Trie();
        for (String word:words) {
            trie.insert(word);    
        }
        int m = board.length;
        int n = board[0].length;
        
        for (int i=0;i<m;i++){
            for (int j=0;j<n;j++){
                boolean[][] visited = new boolean[m][n];        
                dfs(board,i,j,visited,"",trie);
            }
        }
        return new ArrayList<String>(result);
    }
    public void dfs(char[][] board,int x,int y,boolean[][] visited,String str,Trie trie ){
        if (x<0||x>=board.length||y<0||y>=board[0].length) return;
        if (visited[x][y]) return;
        str = str + board[x][y];
        if (!trie.startWith(str)) return;
        if (trie.search(str)) {
            result.add(str);
            
        }
        visited[x][y] = true;
        dfs(board,x+1,y,visited,str,trie);
        dfs(board,x-1,y,visited,str,trie);
        dfs(board,x,y+1,visited,str,trie);
        dfs(board,x,y-1,visited,str,trie);
        visited[x][y] = false;
    }
}
class TrieNode{
        
        boolean isWord;
        HashMap<Character,TrieNode> nexts;
        
        public TrieNode(){
            nexts = new HashMap<Character,TrieNode>();
        }
}
class Trie{
    
    private TrieNode root;
        
    public Trie(){
            root = new TrieNode();
            
    }
    public void insert(String word){
        char[] s = word.toCharArray();
        TrieNode p = root;
        int i = 0;
        int n = word.length();
        while (i<n){
            TrieNode next = p.nexts.get(s[i]);
            if (next!=null){
                p = next ;
                i++;
            }else{
                break;
            }
        }
        
        while (i<n){
            TrieNode newNode = new TrieNode();
            p.nexts.put(s[i],newNode);
            p = newNode;
            i++;
        }
        p.isWord = true;
    }
    public boolean search(String word){
        TrieNode p = root;
        for (int i=0;i<word.length();i++){
            TrieNode child = p.nexts.get(word.charAt(i));
            if (child == null) return false;
            p = child;
        }
        return p.isWord;
    }
    public boolean startWith(String word){
        TrieNode p = root;
        for (int i=0;i<word.length();i++){
            TrieNode child = p.nexts.get(word.charAt(i));
            if (child == null) return false;
            p = child;
        }
        return true;        
    }
}
    
