/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        if (node == null) return null;
        return dfs(node,new HashMap<UndirectedGraphNode,UndirectedGraphNode>());
    }
    public UndirectedGraphNode dfs(UndirectedGraphNode root, HashMap<UndirectedGraphNode,UndirectedGraphNode> map){
        UndirectedGraphNode rootCopy = map.get(root);
        if (rootCopy!=null) return rootCopy;
        
        rootCopy = new UndirectedGraphNode(root.label);
        map.put(root,rootCopy);
        
        for (UndirectedGraphNode child:root.neighbors){
            rootCopy.neighbors.add(dfs(child,map));
        }
        
        return rootCopy;
    }
}
