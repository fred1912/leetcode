public class Solution {
    int[][] dp;
    public int longestIncreasingPath(int[][] matrix) {
        if (matrix.length==0||matrix[0].length==0){
            return 0;
        }
        dp = new int[matrix.length][matrix[0].length];
        boolean[][][] visited;
        int max = Integer.MIN_VALUE;
        int[][] len;
        for (int i=0;i<matrix.length;i++){
            for (int j=0;j<matrix[0].length;j++){
                if (i>0)
                    if (matrix[i-1][j]<matrix[i][j]) continue;
                if (j>0)
                    if (matrix[i][j-1]<matrix[i][j]) continue;
                len = new int[matrix.length][matrix[0].length];
                int temp = search(1,i,j,matrix,len);
                max = Math.max(temp,max);
                dp[i][j] = temp;
            }
            
        }
        return max;
    }
    public int search(int ans,int i, int j, int[][] nums, int[][] len){
        
        int result = ans;
        if (i>0) {
            if (nums[i-1][j]>nums[i][j]) {
                if (dp[i-1][j]!=0) result=Math.max(result,dp[i-1][j]+ans);
                else{
                    if (len[i-1][j]!=0) result = Math.max(result,len[i-1][j]+ans);
                    else{
                        int temp = search(ans+1,i-1,j,nums,len);
                        result = Math.max(result,temp);
                     //len[i][j]=result;
                    //visited[i-1][j][0] = true;
                    }
                }
            }
        }
        if (i+1<nums.length){
            if (nums[i+1][j]>nums[i][j]) {
                if (dp[i+1][j]!=0) result=Math.max(result,dp[i+1][j]+ans);   
                else{
                    if (len[i+1][j]!=0) result = Math.max(result,len[i+1][j]+ans);
                    else{
                        int temp = search(ans+1,i+1,j,nums,len);
                        result = Math.max(result,temp);
                      //  len[i][j]=result;
                    //visited[i-1][j][0] = true;
                    }
                }
            }
        }
        if (j>0){
            if (nums[i][j-1]>nums[i][j]) {
                if (dp[i][j-1]!=0) result=Math.max(result,dp[i][j-1]+ans);
                else{
                    if (len[i][j-1]!=0) result = Math.max(result,len[i][j-1]+ans);
                    else{
                        int temp = search(ans+1,i,j-1,nums,len);
                        result = Math.max(result,temp);
                       // len[i][j]=result;
                    //visited[i-1][j][0] = true;
                    }
                    
                }
            }
        }
        if (j+1<nums[0].length){
            if (nums[i][j+1]>nums[i][j]){ 
                if (dp[i][j+1]!=0) result=Math.max(result,dp[i][j+1]+ans); 
                else{
                    if (len[i][j+1]!=0) result = Math.max(result,len[i][j+1]+ans);
                    else{
                        int temp = search(ans+1,i,j+1,nums,len);
                        result = Math.max(result,temp);
                       // len[i][j]=result;
                    //visited[i-1][j][0] = true;
                    }
                }
            }
        }
        
        len[i][j] = result-ans+1;
        return result;
    }
}
