public class LRUCache {
    
    public class link{
        link pre;
        link next ;
        int val;
        int key;
        public link(int key,int val){
            this.val = val;
            this.key = key;
            pre = null;
            next = null;
        }
    }
    
    HashMap<Integer, link> map;
    link head;
    link tail;
    
    int capacity;
    
    public void remove(){
        removeNode(head.next);
    }
    
    public void removeNode(link node){
        node.pre.next = node.next;
        node.next.pre = node.pre;
        
    }
    
    public void add(link node){
        tail.pre.next = node ;
        node.pre = tail.pre;
        node.next = tail;
        tail.pre = node;
    }
    
    
    public LRUCache(int capacity) {
        map =  new HashMap<Integer, link>();
        head = new link(-1,-1);
        tail = new link(-1,-1);
        head.next = tail;
        tail.pre = head;
        
        this.capacity = capacity;
    }
    
    public int get(int key) {
        if (map.get(key)==null) return -1;
        link node = map.get(key);
        removeNode(node);
        add(node);
        
        return node.val;
    }
    
    public void put(int key, int value) {
        link node = map.get(key);
        if (node == null){
            node = new link(key,value);
            map.put(key,node);
        }else{
            node.val = value;
            removeNode(node);
        }
        add(node);
        
        if (map.size()>capacity){
            map.remove(head.next.key);
            remove();
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
