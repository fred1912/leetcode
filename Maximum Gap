public class Solution {
    public int maximumGap(int[] nums) {
        if (nums.length<2) return 0;
        if (nums.length==2) return nums[0]-nums[1]>0?nums[0]-nums[1]:nums[1]-nums[0];
        
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        
        for (int i=0;i<nums.length;i++){
            if (nums[i]>max) max = nums[i];
            if (nums[i]<min) min = nums[i];
        }
        if (max-min==0) return 0 ;
        double len = 1.0*(max-min)/(nums.length-1);
        
        
        int[] bMin = new int[nums.length];
        int[] bMax = new int[nums.length];
        
        Arrays.fill(bMin,Integer.MAX_VALUE); 
        Arrays.fill(bMax,Integer.MIN_VALUE);
        
        for (int i = 0;i<nums.length;i++){
            int temp = (int)((nums[i]-min)/len);
            bMin[temp] = Math.min(nums[i],bMin[temp]);
            bMax[temp] = Math.max(nums[i],bMax[temp]);
        }
        int maxGap = (int)(len);
        int left = 0,right=1;
        while(left<nums.length-1){
            while (right<nums.length&&bMin[right]==Integer.MAX_VALUE) right++;
            if (right>=nums.length) break;
            maxGap = Math.max(maxGap,bMin[right]-bMax[left]);
            left = right;
            right++;
        }
        return maxGap;
    }
}
