public class Solution {
       
        public void solveSudoku(char[][] board){
                
                dfs(board,0,0);
        }
        
        public  boolean dfs(char[][] board, int row, int col){
        
        if (row == 9) return true;
        if (col == 9) return dfs(board,row+1,0);
        
        if (board[row][col] != '.') return dfs(board,row,col+1);
        for (int i = 1;i <= 9;i++){
            int a = 0 ;
            int b = 0 ;
            
            for (a=0;a<9;a++){
                if (board[row][a] == '0'+i) break;
            }
            if (a!=9) continue;
                
            for (a=0;a<9;a++){
                if (board[a][col] == '0'+i) break;
            }
            if (a!=9) continue;    
                
            for (a=row/3*3; a<row/3*3+3; a++){
                for (b=col/3*3; b<col/3*3+3; b++)
                {
                    if (board[a][b] == '0'+i) break;
                }
                if (b!=col/3*3+3) break;
            }   
            
            if (!(a==row/3*3+3&&b==col/3*3+3)) continue;
            board[row][col] = (char)('0'+i);
            if (dfs(board,row,col+1)) return true;
            board[row][col] = '.';
        }
        return false;
        
    }

}
