/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if (inorder.length!=postorder.length) return null;
        return dfs(inorder,0,inorder.length-1,postorder,0,postorder.length-1);
    }
    public int find(int num[],int start,int end,int key){
            int i;
            for (i=start;i<=end;i++){
                if (num[i]==key) return i;
            }
            return -1;
        }
    public TreeNode dfs(int[] inorder, int instart,int inend, int[] postorder, int poststart, int postend){
        if (instart>inend) return null;
        TreeNode root = new TreeNode(postorder[postend]);
        int position = find(inorder,instart,inend,postorder[postend]);
        
        root.left=dfs(inorder,instart,position-1,postorder,poststart,poststart+position-instart-1);
        root.right=dfs(inorder,position+1,inend,postorder,poststart+position-instart,postend-1);
        return root;
    }
}
