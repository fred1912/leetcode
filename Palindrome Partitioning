public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<List<String>>();
        if (s==null) return result;
        dfs(s,0,new ArrayList<String>(),result);
        return result;
    }
    
    public boolean judge(String s){
        int right = s.length()-1;
        int left = 0;
        while (left<right){
            if (s.charAt(right)!=s.charAt(left)) return false;
            left++;
            right--;
        }
        return true;
    }
    
    public void dfs(String s, int index, List<String> path, List<List<String>> result){
        int len = s.length();
        if (index==len){
            result.add(new ArrayList<String>(path)); 
            return;
        }
        for (int i=index;i<len;i++){
            String sub = s.substring(index,i+1);
            if (!judge(sub)) continue;
            
            path.add(sub);
            dfs(s,i+1,path,result);
            path.remove(path.size()-1);
        }
    }
}
