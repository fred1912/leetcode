/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        
        if (lists==null||lists.length<1) return null;
        return mergeLists(lists,0,lists.length-1);
        
    }
    
    public ListNode mergeLists(ListNode[] lists,int start, int end){
        
        if (start<end) {
            
            int mid = (start+end)/2;
            return mergeTwoLists(mergeLists(lists,start,mid),mergeLists(lists,mid+1,end));
            
        }
        return lists[start];
        
    }
    
    public ListNode mergeTwoLists(ListNode head1, ListNode head2){
        
        if (head1==null) return head2;
        if (head2==null) return head1;
        
        ListNode newhead = head1;
        
        ListNode node1=head1;
        ListNode node2=head2;
        
        if (head1.val>head2.val){
            
            node1 = head2;
            node2 = head1;
            newhead = head2;
        }
        
        while (node1.next!=null&&node2!=null){
            
            if (node2.val<node1.next.val){
                ListNode temp = node2.next ;
                node2.next  =   node1.next ;
                node1.next = node2;
                node1 = node1.next;
                node2 = temp;
            }else{
                
                node1 = node1.next;
                
            }
            
        }
    
      if (node2!=null){
          
          node1.next = node2;
      }
      return newhead;  
    }
    
}
