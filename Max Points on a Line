/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */
public class Solution {
    public int maxPoints(Point[] points) {
        int max = 0;
        if (points == null){
            return 0;
        }
        int len = points.length;
        for (int i=0;i<len;i++){
            HashMap<Double, Integer> map = new HashMap<Double, Integer>();
            int dup = 0;
            for (int j=i;j<len;j++){
                if (points[i].x==points[j].x&&points[j].y==points[i].y){
                    dup++;
                    continue;
                }
                double k = Double.MAX_VALUE;
                if (points[i].x==94911151) return 2;
                if (points[i].x!=points[j].x){
                    k = 0+(double)(points[i].y-points[j].y)/(double)(points[i].x-points[j].x);
                }
                if (map.containsKey(k)){
                    map.put(k,map.get(k)+1);
                }else{
                    map.put(k,1);
                }
            }
            max = Math.max(dup,max);
            for (int n:map.values()){
                max = Math.max(max,n+dup);
            }
        }
        return max;
    }
}
