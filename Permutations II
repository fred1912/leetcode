public class Solution {
    
    public List<List<Integer>> permuteUnique(int[] nums) {
        
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        boolean[] visit = new boolean[nums.length];
        
        if (nums==null||nums.length==0) return result;
        Arrays.sort(nums);
        dfs(nums,new ArrayList<Integer>(),result,visit);
        return result ;
    }
    public void dfs(int[] nums, List<Integer> path, List<List<Integer>> result,boolean[] visit){
        int len = nums.length;
        if (path.size()==len) {
            result.add(new ArrayList(path));
            return;
        }
        
        for (int i=0;i<len;i++){
            
            if (visit[i]||(i!=0&&visit[i-1]&&nums[i]==nums[i-1])) continue;
            visit[i] = true;
            path.add(nums[i]);
            dfs(nums,path,result,visit);
            path.remove(path.size()-1);
            visit[i] = false;
            
        }
    }
}
