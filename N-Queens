public class Solution {
    public List<List<String>> solveNQueens(int n) {
        
        List<List<String>> result = new ArrayList<List<String>>();
        if (n == 0) return result;
        dfs(n,new ArrayList<Integer>(),result);
        return result;
    }
    
    public void dfs(int n ,List<Integer> path, List<List<String>> result){
        if (path.size()==n) {
            List<String> solution = createSolution(path);
            result.add(new ArrayList(solution));
            return;
        }
        
        for (int i=0;i<n;i++){
            
            if (!isValid(path,i)) continue;

            path.add(i);
            dfs(n,path,result);
            path.remove(path.size()-1);
        }
    }
    
    public boolean isValid(List<Integer> path, int col){
        
        int size = path.size();
        for (int i=0;i<size;i++){
            if (path.get(i)==col){
                return false;
            }
            if (size-i==Math.abs(col-path.get(i))) return false;
            
        }
        return true;
    }
    
    public List<String> createSolution(List<Integer> path){
        int size = path.size();
        List<String> ans = new ArrayList<String>();
        
        for (int i = 0;i<size;i++){
            StringBuilder s =new StringBuilder();
            for (int j=0;j<size;j++){
        
                if (j == path.get(i)) {
                    s.append('Q');
                    
                }else{
                    s.append('.');
                }
            }
            ans.add(s.toString());
        }
        
        
        return ans;
    }
}
