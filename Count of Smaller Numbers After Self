public class Solution {
    private int[] count;
    public List<Integer> countSmaller(int[] nums) {
        List<Integer> result = new ArrayList<Integer>();
        count = new int[nums.length];
         
        int[] indexs = new int[nums.length];
        for (int i=0;i<indexs.length;i++){
            indexs[i] = i;
        }
        mergeSort(nums,indexs,0,nums.length-1);
        for (int i=0;i<count.length;i++){
            result.add(count[i]);
        }
        return result;
    }
    
    private void mergeSort(int[] nums, int[] indexs, int start, int end){
        if (end<=start) {
            return ;
        }
        int mid = (start+end)/2;
        mergeSort(nums,indexs,start,mid);
        mergeSort(nums,indexs,mid+1,end);
        
        merge(nums,indexs,start,end);
    }
    private void merge(int[] nums, int[] indexs, int start, int end){
        int mid = (start+end)/2;
        int left = start;
        int right = mid+1;
        
        int rightCount = 0;
        int[] newIndexs = new int[end-start+1];
        
        int sortedIndex = 0;
        
        while (left<=mid&&right<=end){
            if (nums[indexs[right]]<nums[indexs[left]]){
                newIndexs[sortedIndex] = indexs[right];
                rightCount++;
                right++; 
            }else{
                newIndexs[sortedIndex] = indexs[left];
                count[indexs[left]]+=rightCount;
                left++;                 
            }
            sortedIndex++;
        }
        while(left<=mid){
                newIndexs[sortedIndex] = indexs[left];
                count[indexs[left]]+=rightCount;
                left++; 
                sortedIndex++;
        }
        while (right<=end){
                newIndexs[sortedIndex++] = indexs[right++];
        }
        for (int i=start;i<=end;i++){
            indexs[i] = newIndexs[i-start];
        }
        
        
    }
}
