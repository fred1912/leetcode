/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> result = new ArrayList<Interval>();
        Collections.sort(intervals,new Comparator<Interval>(){
           public int compare(Interval first,Interval second){
               return first.start-second.start;
           } 
        });
    if (intervals.size()<1) return result;
    Interval p = intervals.get(0);
    Interval temp;
    
    int i = 1;
    while (i<intervals.size()){
      temp = intervals.get(i);
      if (p.end>=temp.start){
          p.end = Math.max(p.end,temp.end);
      }else{
          result.add(p);
          p = temp ;
      }
      i++;
    }
    result. add(p);
    return result;
    
    }
}
